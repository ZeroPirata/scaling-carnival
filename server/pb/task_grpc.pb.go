// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: task.proto

package server_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransacaoService_CriarTransacao_FullMethodName   = "/itauchallenge.TransacaoService/CriarTransacao"
	TransacaoService_LimparTransacoes_FullMethodName = "/itauchallenge.TransacaoService/LimparTransacoes"
	TransacaoService_GetEstatistica_FullMethodName   = "/itauchallenge.TransacaoService/GetEstatistica"
)

// TransacaoServiceClient is the client API for TransacaoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Definição do Serviço gRPC
type TransacaoServiceClient interface {
	// RPC para criar uma nova transação
	// Mapeia para POST /transacao
	CriarTransacao(ctx context.Context, in *CriarTransacaoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// RPC para limpar todas as transações
	// Mapeia para DELETE /transacao
	LimparTransacoes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// RPC para obter as estatísticas dos últimos 60 segundos
	// Mapeia para GET /estatistica
	GetEstatistica(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EstatisticaResponse, error)
}

type transacaoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransacaoServiceClient(cc grpc.ClientConnInterface) TransacaoServiceClient {
	return &transacaoServiceClient{cc}
}

func (c *transacaoServiceClient) CriarTransacao(ctx context.Context, in *CriarTransacaoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TransacaoService_CriarTransacao_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transacaoServiceClient) LimparTransacoes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TransacaoService_LimparTransacoes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transacaoServiceClient) GetEstatistica(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EstatisticaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EstatisticaResponse)
	err := c.cc.Invoke(ctx, TransacaoService_GetEstatistica_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransacaoServiceServer is the server API for TransacaoService service.
// All implementations must embed UnimplementedTransacaoServiceServer
// for forward compatibility.
//
// Definição do Serviço gRPC
type TransacaoServiceServer interface {
	// RPC para criar uma nova transação
	// Mapeia para POST /transacao
	CriarTransacao(context.Context, *CriarTransacaoRequest) (*emptypb.Empty, error)
	// RPC para limpar todas as transações
	// Mapeia para DELETE /transacao
	LimparTransacoes(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// RPC para obter as estatísticas dos últimos 60 segundos
	// Mapeia para GET /estatistica
	GetEstatistica(context.Context, *emptypb.Empty) (*EstatisticaResponse, error)
	mustEmbedUnimplementedTransacaoServiceServer()
}

// UnimplementedTransacaoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransacaoServiceServer struct{}

func (UnimplementedTransacaoServiceServer) CriarTransacao(context.Context, *CriarTransacaoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CriarTransacao not implemented")
}
func (UnimplementedTransacaoServiceServer) LimparTransacoes(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimparTransacoes not implemented")
}
func (UnimplementedTransacaoServiceServer) GetEstatistica(context.Context, *emptypb.Empty) (*EstatisticaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstatistica not implemented")
}
func (UnimplementedTransacaoServiceServer) mustEmbedUnimplementedTransacaoServiceServer() {}
func (UnimplementedTransacaoServiceServer) testEmbeddedByValue()                          {}

// UnsafeTransacaoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransacaoServiceServer will
// result in compilation errors.
type UnsafeTransacaoServiceServer interface {
	mustEmbedUnimplementedTransacaoServiceServer()
}

func RegisterTransacaoServiceServer(s grpc.ServiceRegistrar, srv TransacaoServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransacaoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransacaoService_ServiceDesc, srv)
}

func _TransacaoService_CriarTransacao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CriarTransacaoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransacaoServiceServer).CriarTransacao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransacaoService_CriarTransacao_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransacaoServiceServer).CriarTransacao(ctx, req.(*CriarTransacaoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransacaoService_LimparTransacoes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransacaoServiceServer).LimparTransacoes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransacaoService_LimparTransacoes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransacaoServiceServer).LimparTransacoes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransacaoService_GetEstatistica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransacaoServiceServer).GetEstatistica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransacaoService_GetEstatistica_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransacaoServiceServer).GetEstatistica(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TransacaoService_ServiceDesc is the grpc.ServiceDesc for TransacaoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransacaoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "itauchallenge.TransacaoService",
	HandlerType: (*TransacaoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CriarTransacao",
			Handler:    _TransacaoService_CriarTransacao_Handler,
		},
		{
			MethodName: "LimparTransacoes",
			Handler:    _TransacaoService_LimparTransacoes_Handler,
		},
		{
			MethodName: "GetEstatistica",
			Handler:    _TransacaoService_GetEstatistica_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
